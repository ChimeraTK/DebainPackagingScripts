#!/bin/bash -e

# master shell script for creating debian packages for multiple packages, with proper reverse-dependency checking
# and other safetly checks.

function ask() {
  echo ""
  echo -n "$1 "
  read answer
  if [ "$answer" != "y" -a "$answer" != "Y" ]; then
    echo "Aborted."
    exit 1
  fi
}


# check command line arguments
if [ $# -lt 3 -o $(($#%2)) -eq 0 ]; then
  echo "Usage: ./master <distribution_codename> <package_name1> <package_version1> [<package_name2> <package_version2>] [...]"
  echo "Example: ./master xenial mtca4u-deviceaccess 00.16.00 qthardmon 00.17.07"
  exit 1
fi

# check for other unfinished operations
NEED_CLEANUP=0
if [ -e "master-control" ]; then
  echo "You file 'master-control' exists. Are you running another instance of this script in the same directory?"
  NEED_CLEANUP=1
fi
if [ -s "pbuilder-result" ]; then
  echo "You still have packages in the pbuilder-result directory."
  NEED_CLEANUP=1
fi
if [ -e "debian_package" ]; then
  echo "The directory 'debian_package' exists. Are you currently building a package in this directory?"
  NEED_CLEANUP=1
fi
if [ "$NEED_CLEANUP" == "1" ]; then
  echo -n "Do you want to remove any leftovers from the previous (or current!?) run and continue (y/N)? "
  read answer
  if [ "$answer" != "y" -a "$answer" != "Y" ]; then
    echo "Aborted."
    exit 1
  fi
  rm -rf pbuilder-result debian_package master-control
  echo ""
fi

# obtain distribution code name
distribution="$1"
shift

# create the master control file
touch master-control
echo "distribution=${distribution}" >> master-control
echo "declare -A package_buildcmd" >> master-control

# check for local modifications in the DebianBuildVersions directory
./checkIfBuildVersionsCommitted
if [ $? -ne 0 ]; then
  do_not_publish=1
else
  do_not_publish=0
fi
echo "do_not_publish=${do_not_publish}" >> master-control

# create list of packages to build from command line arguments
declare -A package_list        # associative array: package name -> package version
while [ -n "$1" ]; do
  package_list["$1"]="$2"
  shift ; shift
done

# search for reverse dependencies of dev packages
for package in "${!package_list[@]}"; do
  # obtain possible reverse dependencies for lib${package}-dev
  TEMPFILE=`mktemp`
  ./findReverseDependencies lib${package}-dev $distribution | grep "^lib" | grep -- "-dev " | sed -e 's/^lib//' -e 's/-dev / /' > $TEMPFILE
  readarray revdeps_with_versions < $TEMPFILE
  rm -f $TEMPFILE
  # loop over any found reverse dependencies
  for revdep_with_version in "${revdeps_with_versions[@]}" ; do
    revdep_name=`echo ${revdep_with_version} | sed -e 's/ .*$//'`
    revdep_version=`echo ${revdep_with_version} | sed -e 's/^.* //'`
    if [ -z "${package_list[$revdep_name]+abc}" ]; then
      # package not yet in the list: add it
      package_list["${revdep_name}"]="${revdep_version}"
    fi
  done
done

# output list of packages to be build
echo "The following packages will be build:"
for package in "${!package_list[@]}"; do
  echo "$package ${package_list[$package]}"
done

# ask if we want to proceed
ask "Do you want to proceed with configuring and building the packages in the given versions (y/N)?"

# gain root rights. This (likely) avoids the need to type the passwort later in the middle of the build step
sudo echo "We have root rights now."

# update the pbuilder image
./updatePBuilder $distribution

# configure packages
TEMPFILE=`mktemp`
declare -A package_buildcmd        # associative array: package name -> command to build the package
for package in "${!package_list[@]}"; do
  echo ""
  echo "Configuring $package in version ${package_list[$package]} for ${distribution}..."
  ./configureRelease "$package" "${package_list[$package]}" "$distribution" | tee $TEMPFILE
  package_buildcmd[$package]=`tail -n1 $TEMPFILE`
  echo "package_buildcmd[$package]=\"${package_buildcmd[$package]}\"" >> master-control
done
rm $TEMPFILE

# building packages
for package in "${!package_list[@]}"; do
  echo ""
  echo "Building $package in version ${package_list[$package]} for ${distribution}..."
  ${package_buildcmd[$package]}
done

# committing build versions and publish packages
if [ $do_not_publish -eq 0 ]; then
  ask "Publish the build versions to git and the packages to the DESY Debian repositories (y/N)?"
  ./commitDebianBuildVersions
  ./publishDebianPackages
fi

