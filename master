#!/bin/bash -e
cd $(dirname "$0")
full_cmdline="$*"

# master shell script for creating debian packages for multiple packages, with proper reverse-dependency checking
# and other safetly checks.

# function to ask a question (first parameter) and expect a y/n answer from the user. If the user answers with anything
# other than y, the script will terminate.
function ask() {
  echo ""
  echo -n "$1 "
  read answer
  if [ "$answer" != "y" -a "$answer" != "Y" ]; then
    echo "Aborted."
    false
  fi
}

# function to check if an array (first parameter - just the name without $) contains a value (second parameter)
function hasValue() {
  arrayname=$1[@]
  for val in "${!arrayname}"; do
    if [ "$val" == "$2" ]; then
      return 0  # True
    fi
  done
  return 1  # False
}


# check command line arguments
if [ $# -lt 3 -o $(($#%2)) -eq 0 ]; then
  echo "Usage: ./master <distribution_codename> <package_name1> <package_version1> [<package_name2> <package_version2>] [...]"
  echo "Example: ./master xenial chimeratk-deviceaccess 00.16.00 qthardmon latest"
  echo ""
  echo "Specifying 'latest' as a version will build the greatest version (see sort -V) found on the source repository."
  exit 1
fi

# check if config.sh exists
echo "Checking if config.sh exists. CD: $(pwd)"
if [ ! -f config.sh ]; then
  echo "No config.sh found. Please define your configuration based on config.sh.TEMPLATE"
  exit 1
fi

# check for other unfinished operations
NEED_CLEANUP=0
CONTINUE_BUILD=0
if [ -e "master-control" ]; then
  echo "You file 'master-control' exists. Are you running another instance of this script in the same directory?"
  NEED_CLEANUP=1
fi
if [ -s "pbuilder-result" ]; then
  echo "You still have packages in the pbuilder-result directory."
  NEED_CLEANUP=1
fi
if [ -e "debian_package" ]; then
  echo "The directory 'debian_package' exists. Are you currently building a package in this directory?"
  NEED_CLEANUP=1
fi
if [ "$NEED_CLEANUP" == "1" ]; then
  echo ""
  echo -n "Do you want to remove any leftovers from the previous (or current!?) run [y], try to continue the previous build [c], or abort [n] (y/c/N)? "
  read answer
  if [ "$answer" == "c" -o "$answer" == "C" ]; then
    echo ""
    echo " **************************************************"
    echo " ***  Trying to continue the last build chain.  ***"
    echo " ***  This feature has not been well tested.    ***"
    echo " ***  Please double check the result before     ***"
    echo " ***  publishing the packages!                  ***"
    echo " ***  Report any issues immediately!            ***"
    echo " **************************************************"
    echo ""
    echo -n "Waiting for 2 seconds before proceeding."
    for ((i=0; i<2; i++)); do
      sleep 1
      echo -n .
    done
    echo ""
    CONTINUE_BUILD=1
  elif [ "$answer" != "y" -a "$answer" != "Y" ]; then
    echo ""
    echo "Aborted."
    false
  else
    rm -rf pbuilder-result debian_package master-control
    echo ""
  fi
fi

# check for local modifications in the DebianBuildVersions directory
do_not_publish=0
if [ $CONTINUE_BUILD != 1 ]; then
  ./checkIfBuildVersionsCommitted || do_not_publish=1
fi
if [ $do_not_publish == 1 ]; then
  echo ""
  echo -n "Continue anyway or reset the DebianBuildVersions directory (y/r/N)? "
  read answer
  if [ "$answer" = "r" -o "$answer" = "R" ]; then
    echo ""
    echo "*** ATTENTION ***"
    echo "All modifications to the DebianBuildVersions directory including new files will be lost irreversible!"
    ask "Do you really want to reset the DebianBuildVersions directory (y/N)? "
    ( cd DebianBuildVersions ; git reset --hard ; git clean -f -d )
    do_not_publish=0
    ./checkIfBuildVersionsCommitted
    if [ $do_not_publish == 1 ]; then
      echo "Sorry, automatic cleaning did not work. Aborted."
      false
    else
      echo "The DebianBuildVersions directory has been cleaned successfully."
    fi
  elif [ "$answer" != "y" -a "$answer" != "Y" ]; then
    echo "Aborted."
    false
  fi
fi

# obtain distribution code name
distribution="$1"
arch="amd64"      # note: changing this has not been tested!
shift

# continue build: read previous master-control file
if [ $CONTINUE_BUILD == 1 ]; then
  source master-control
  if [ "$cmdline" != "$full_cmdline" ]; then
    echo "Cannot continue build, the command line arguments passed are not identical to the last run."
    echo "Old arguments were: $cmdline"
    echo "New arguments are: $full_cmdline"
    exit 1
  fi
fi

# create the master control file
if [ $CONTINUE_BUILD != 1 ]; then
  touch master-control
  echo "cmdline='$full_cmdline'" >> master-control
  echo "do_not_publish=${do_not_publish}" >> master-control
  echo "distribution=${distribution}" >> master-control
  echo "arch=${arch}" >> master-control
  echo "declare -A package_buildcmd" >> master-control
fi

# checkout or update the control git repository
source config.sh
if [ ! -d "DebianBuildVersions" ]; then
  git clone -q "$DebianBuildVersionsURI" DebianBuildVersions
else
  cd DebianBuildVersions
  git pull -q
  cd ..
fi

# create list of packages to build from command line arguments
declare -A package_list        # associative array: package name -> package version
while [ -n "$1" ]; do
  package_list["$1"]="$2"
  shift ; shift
done

# search for reverse dependencies of dev packages
echo "Searching for reverse dependencies..."
for package in "${!package_list[@]}"; do
  # obtain possible reverse dependencies for lib${package}-dev
  TEMPFILE=`mktemp`
  ./findReverseDependencies lib${package}-dev $distribution $DebianRepository $arch | grep "^lib" | grep -- "-dev " | sed -e 's/^lib//' -e 's/-dev / /' > $TEMPFILE
  readarray revdeps_with_versions < $TEMPFILE
  rm -f $TEMPFILE
  # loop over any found reverse dependencies
  for revdep_with_version in "${revdeps_with_versions[@]}" ; do
    revdep_name=`echo ${revdep_with_version} | sed -e 's/ .*$//'`
    revdep_version=`echo ${revdep_with_version} | sed -e 's/^.* //'`
    if [ -z "${package_list[$revdep_name]+abc}" ]; then
      # package not yet in the list: add it
      package_list["${revdep_name}"]="${revdep_version}"
    fi
  done
done

# check versions and deal with "latest" version spec
echo "Verifying versions..."
for package in "${!package_list[@]}"; do
  REPO=`grep "^SourceURI: " DebianBuildVersions/$package/CONFIG | sed -e 's|^SourceURI: ||'`
  if [ ${package_list["${package}"]} == "latest" ]; then
    package_list["${package}"]=`git ls-remote --tags ${REPO} | sed -e 's_^.*refs/tags/__' | grep -v "\^{}$" | sort -V | tail -1`
  else
    VERSION_OK=0
    for version in `git ls-remote --tags ${REPO} | sed -e 's_^.*refs/tags/__' | grep -v "\^{}$"`; do
      if [ ${package_list["${package}"]} == $version ]; then
        VERSION_OK=1
      fi
    done
    if [ $VERSION_OK == 0 ]; then
      rm master-control
      echo "*** ERROR: Version "${package_list["${package}"]}" of package ${package} is not found on the repository!"
      exit 1
    fi
  fi
done

# sort package list so dependencies are built first
echo "Sorting package list..."
declare -a package_build_order  # non-associative array so we have a well-defined order
for package in "${!package_list[@]}"; do    # fill array initially with package names from the list
  package_build_order+=("$package")
done
sorting_done=0
while [ "$sorting_done" == "0" ]; do
  declare -a package_build_order_sort
  sorting_done=1
  for package in "${package_build_order[@]}"; do
    # check if the package has a config. If not print a warning and ignore it  
    if ! [ -e DebianBuildVersions/$package/CONFIG ]; then
      echo "No config for '$package' found. No packages for this project will be build."
      continue
    fi
    # add the dependencies of the package to the new list, if not yet present
    DEPENDENCIES=`grep "^Dependencies: " DebianBuildVersions/$package/CONFIG | sed -e 's|^Dependencies: ||'`
    for dependency in $DEPENDENCIES; do
      dependency_packagename=`echo $dependency | sed -e 's|^lib||' | sed -e 's|-dev$||'`
      if hasValue package_build_order "$dependency_packagename" ; then
        if ! hasValue package_build_order_sort "$dependency_packagename" ; then
          sorting_done=0
          package_build_order_sort+=("$dependency_packagename")
        fi
      fi
    done
    # add the package itself to the new list, if not yet present
    if ! hasValue package_build_order_sort "$package" ; then
      package_build_order_sort+=("$package")
    fi
  done
  # move the new list into the old list("${a[@]}")
  unset package_build_order
  declare -a package_build_order
  for package in "${package_build_order_sort[@]}"; do
    package_build_order+=("$package")
  done
  unset package_build_order_sort
done

# output list of packages to be build
echo ""
echo "The following packages will be build (in that order):"
for package in "${package_build_order[@]}"; do
  echo -n "$package ${package_list[$package]}"
  if [ -n "${package_buildcmd[$package]}" ]; then
    echo " [already done]"
    continue
  fi
  echo ""  
done

# ask if we want to proceed
ask "Do you want to proceed with configuring and building the packages in the given versions (y/N)?" || ( rm master-control ; exit 1 )

# gain root rights. This (likely) avoids the need to type the passwort later in the middle of the build step
sudo echo "We have root rights now."

# configure and build packages
TEMPFILE=`mktemp`
declare -A package_buildcmd        # associative array: package name -> command to build the package
for package in "${package_build_order[@]}"; do
  if [ -n "${package_buildcmd[$package]}" ]; then
    echo "Package $package has already been built, continuing with next package..."
    continue
  fi
  echo ""
  echo "Configuring $package in version ${package_list[$package]} for ${distribution}..."
  # update pbuilder chroot environment (needed for every package, since dependencies might be added)
  ./updatePBuilder "$distribution" "$DebianRepository"
  # configure the package (possibly using just built dependencies)
  ./configureRelease "$package" "${package_list[$package]}" "$distribution" "$DebianRepository" "$arch" | tee $TEMPFILE ; test ${PIPESTATUS[0]} -eq 0
  package_buildcmd[$package]=`tail -n1 $TEMPFILE`
  echo ""
  # actually build the package
  echo "Building $package in version ${package_list[$package]} for ${distribution}..."
  ${package_buildcmd[$package]}
  # put buildcmd into master-control file
  echo "package_buildcmd[$package]=\"${package_buildcmd[$package]}\"" >> master-control
  # check consistency of the package
  ./checkPackageConsistency "$package"
done
rm $TEMPFILE

# run validation
./validation

# committing build versions and publish packages
source master-control       # might be changed e.g. during configureRelease
if [ $do_not_publish -eq 0 ]; then
  echo "You can find the packages in the following directory: pbuilder-result/dists/${distribution}/main/binary-${arch}"
  # before asking a question now let's clear the input buffer (at least up to 10000 chars) so we don't accidentally abort.
  read -t 1 -n 10000 discard || true
  ask "Publish the build versions to git and the packages to the DESY Debian repositories (y/N)?"
  ./commitDebianBuildVersions
  ./publishDebianPackages
else
  echo "Publication of packages is disallowed. You can find the packages in the following directory: pbuilder-result/dists/${distribution}/main/binary-${arch}"
fi

