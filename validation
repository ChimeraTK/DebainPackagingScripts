#!/bin/bash
#
# Script to validate the Debian packages built with the DebianPackagingScripts
#
WD=`realpath $(dirname "$0")`
cd "$WD"

source functions.sh

# load master-control file
if [ ! -f master-control ]; then
    echo "No master_control file found. Run the master script first."
    exit 1
fi
source master-control
DISTRIBUTION=${distribution}

# load configuration
source ${WD}/config.sh

# preperations for running pbuilder later
LOCAL_REPOS="${WD}/pbuilder-result"
PBUILDER_IMAGE="${WD}/pbuilder-base/base-${distribution}.tgz"

PRESEED_REPOS=""
if [ "${use_preseed_repository}" == "1" ]; then
  PRESEED_REPOS="`pwd`/preseed"
fi
HOOKDIR="`pwd`/pbuilder-hooks"

# Check that there are debian packages and return an error if not
if [ ! -d pbuilder-result ]; then
    echo "No pbuilder-result directory found. Run the master script first."
    exit 1
fi
cd pbuilder-result/dists/${distribution}/main/binary-${arch}

# global error flag, will be set in case of an error
ERROR=0

# update the pbuilder chroot environment to take into account the latest packages
echo ""
echo " ================================================================================================================"
echo " == Trying to install all packages currently being in the pbuilder-result"
echo " ================================================================================================================"
echo ""
${WD}/updatePBuilder "$distribution"

# try to install all the debian packages in a pbuilder environment
PACKAGE_LIST=`ls *.deb | sed -e 's|_.*$||'`
SCRIPT=`mktemp -p ${LOCAL_REPOS}`  # must be in the pbuilder-result directory, since it is bind-mounted in the pbuilder environment
echo "#!/bin/bash -e" > $SCRIPT
echo "apt-get install -y `echo $PACKAGE_LIST`" >> $SCRIPT

# The pbuilder on Ubuntu 18.04 (and presumably later) mounts /dev and /run/shm by itself
# If we bind it into the container, it cannot unbind it properly if any browser is running on bionic
our_version=$(lsb_release -r | awk '{print $2}' | tr -d .)
bind_mounts="${LOCAL_REPOS} ${PRESEED_REPOS}"
if test "$our_version" -lt "1804"; then
    bind_mounts="${bind_mounts} /dev /run/shm"
fi

# For the pbuilder hooks
export PRESEED_REPOS
export DISTRIBUTION
echo "PRESEED_REPOS = ${PRESEED_REPOS}"

sudo -E pbuilder --execute --distribution ${distribution} --override-config --components "main ${ADDITIONALREPO}" \
                 --othermirror "${MIRRORLIST}"                                                           \
                 --basetgz "${PBUILDER_IMAGE}" --bindmounts "${bind_mounts}" --hookdir "${HOOKDIR}" "${SCRIPT}"
if [ $? -ne 0 ]; then
  echo "*** INSTALLING THE PACKAGES FAILED"
  ERROR=1
fi
rm $SCRIPT

echo ""
echo " ================================================================================================================"
echo " == Validating all packages currently being in the pbuilder-result directory"
echo " ================================================================================================================"
echo ""

# loop over all packages in the list (note: this is not the list of .deb files but the list of projects!)
echo 0 > "${LOCAL_REPOS}/nDebianFilesChecked.txt"  # counter for total number of checked .deb files
for package in "${!package_buildcmd[@]}"; do
  ${WD}/checkPackageConsistency "$package" || ERROR=1
done

# check total number of .deb files
nfiles=`ls *.deb *.ddeb 2>/dev/null | wc -l`
nDebianFilesChecked=`cat "${LOCAL_REPOS}/nDebianFilesChecked.txt"`
if [ $nfiles -ne $nDebianFilesChecked ]; then
  echo "Wrong number of .deb files in the pbuilder-results directory: $nfiles files found, $nDebianFilesChecked expected and checked."
  ERROR=1
fi

# print overall result
if [ "$ERROR" == "0" ]; then
  echo "No problems found."
  exit 0
else
  echo "*****************************************************************"
  echo "*** Problems found. Please check carefully before publishing! ***"
  echo "*****************************************************************"
  exit 1
fi
