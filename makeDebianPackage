#!/bin/bash -e

# Shell script to generate a debian package from a particular tag (configured during the cmake configuration).
# Parse command line arguments
if [ -z "$1" ] ; then
  # print usage
  echo "Usage: ./makeDebianPackage path/to/control/directory/created/by/configureRelease"
  echo "Hint: configureRelease will print the full command line to run this script after creating the control directory."
  exit 1
fi
CONTROLDIR="`pwd`/$1"

# load config
if [ ! -f "${CONTROLDIR}/makeDebianPackage.config" ]; then
  echo "Wrong control directory given."
  exit 1
fi
source "${CONTROLDIR}/makeDebianPackage.config"
source config.sh
export PROJECT_BUILDVERSION

if [ -z ${N_PBUILDER_THREADS} ]; then
  export N_PBUILDER_THREADS=1
fi

echo "using ${N_PBUILDER_THREADS} thread(s)"

# directory with local Debian repository and where the created packages should be placed
LOCAL_REPOS="`pwd`/pbuilder-result"

# directory with pbuilder base image
PBUILDER_IMAGE="`pwd`/pbuilder-base/base-${DISTRIBUTION}.tgz"

# Create a working directory in order not to merge with the rest in the build directory
rm -rf debian_package
mkdir debian_package
cd debian_package

# Check out the correct tag from the master git repository. Note, we first clone and then checkout the tag because the
# old git version on Ubuntu12.4 does not support to do it in one go.
BUILD_DIR_NAME=${PACKAGE_BASENAME}_${SOVERSION}
git clone --recursive ${SOURCE_URI} ${BUILD_DIR_NAME}
( cd  ${BUILD_DIR_NAME} &&\
  git checkout tags/${TAGVERSION} &&\
  rm -rf .git )
# Debian convention: file has to end on .orig.tar.gz
tar -czf ${BUILD_DIR_NAME}.orig.tar.gz ${BUILD_DIR_NAME}

# Copy the prepared debian packaging config files to the source code directroy
mkdir -p ${BUILD_DIR_NAME}/debian
cp -r ${CONTROLDIR}/* ${BUILD_DIR_NAME}/debian
cd ${BUILD_DIR_NAME}

# Before building the package we will update the changelog. This is easier from a shell script
# because debchange does the right format and the current date, user name and email automatically for us.
# Use the NAME and EMAIL environment variables to get correct values if needed (usually the email is
#  user@host instead of first.last@institute, for instance killenb@mskpcx18571.desy.de instead of martin.killenberg@desy.de).
# TODO: move this into the configureRelease script and keep the changelog once it is created (in the DebianBuildVersions repo)
rm -f debian/changelog
debchange --create --package ${PACKAGE_BASENAME} -v ${PACKAGE_VERSION} --distribution ${DISTRIBUTION} ${PACKAGE_MESSAGE}

# Now everything is prepared and we can actually build the package.
# If you have a gpg signature you can remove the -us and -uc flags and sign the package.

#Note: --debbuildopts must be before the -- to be effectice

# The pbuilder on Ubuntu 18.04 (and presumably later) mounts /dev and /run/shm by itself
# If we bind it into the container, it cannot unbind it properly if any browser is running on bionic
our_version=$(lsb_release -r | awk '{print $2}' | tr -d .)
bind_mounts="${LOCAL_REPOS}"
if test "$our_version" -lt "1804"; then
    bind_mounts="${bind_mounts} /dev /run/shm"
fi

time pdebuild --debbuildopts -j${N_PBUILDER_THREADS} -- --distribution ${DISTRIBUTION} --buildresult "${LOCAL_REPOS}/dists/${DISTRIBUTION}/main/binary-${ARCH}"   \
            --basetgz "${PBUILDER_IMAGE}" --bindmounts "${bind_mounts}"      || exit 1
echo ""
echo "You can find the resulting debian packages in this directory: ${LOCAL_REPOS}/dists/${DISTRIBUTION}/main/binary-${ARCH}"

