#!/usr/bin/python

import debian.debian_support
import urllib
import subprocess
import os
import sys

# output usage
if len(sys.argv) != 5 :
  print("Usage: ./configureRelease <project_name> <project_version> <distribution_codename> <architecture>")
  print("Example: ./configureRelease DOOCSwrappers 0.5.0 xenial amd64")
  sys.exit()

# parse command line arguments
project = sys.argv[1]
version = sys.argv[2]
splitversion = version.split(".")
epoch = splitversion[0]+"."+splitversion[1]
patchlevel = splitversion[2]
codename = sys.argv[3]
arch = sys.argv[4]
print("Project: "+project)
print("Version: "+version)
print("Epoch version: "+epoch)
print("Distribution: "+codename)
print("Architecture: "+arch)

# checkout or update the control git repository
if not os.path.isdir("DebianBuildVersions"):
  subprocess.call(["git", "clone", "-q", "git@github.com:ChimeraTK/DebianBuildVersions.git"])
else:
  os.chdir("DebianBuildVersions")
  subprocess.call(["git", "pull", "-q"])
  os.chdir("..")

# read config file
configfile = open("DebianBuildVersions/"+project+"/CONFIG",'r').read().splitlines()
config = {}
for line in configfile:
  ( key, value ) = line.split(":", 1)
  config[key.strip()] = value.strip()

# parse lists of dependencies
dependencies = config["Dependencies"].split(" ")
dependencies_dev = config["Dependencies-dev"].split(" ")


print("Searching for dependencies...")

# download Packages file from the DESY DOOCS apt repositories
subprocess.call(["wget", "-q", "http://doocspkgs.desy.de/pub/doocs/dists/"+codename+"/main/binary-"+arch+"/Packages", "-O", "Packages.DESY"])

# download Packages file from Ubuntu repositories and unpack
subprocess.call(["wget", "-q", "http://de.archive.ubuntu.com/ubuntu/dists/"+codename+"/main/binary-"+arch+"/Packages.gz", "-O", "Packages.MAIN.gz"])
subprocess.call(["gunzip", "-f", "Packages.MAIN.gz"])

# download Packages file from Ubuntu repositories and unpack
subprocess.call(["wget", "-q", "http://de.archive.ubuntu.com/ubuntu/dists/"+codename+"/universe/binary-"+arch+"/Packages.gz", "-O", "Packages.UNIVERSE.gz"])
subprocess.call(["gunzip", "-f", "Packages.UNIVERSE.gz"])

# concatenate both files
subprocess.call(["cat Packages.DESY Packages.MAIN Packages.UNIVERSE > Packages"], shell=True)


# open Packages file and parse it
PackageFile = debian.debian_support.PackageFile("Packages")
dependency_versions = {}

# search for dependencies
for Package in PackageFile:
  for dependency in dependencies:
    PackageAsDictionary = dict(Package)
    if dependency == PackageAsDictionary["Package"]:
      dependency_versions[dependency] = PackageAsDictionary["Version"]

# check for unfound dependencies
for dependency in dependencies + dependencies_dev:
  if not dependency in dependency_versions:
    sys.exit("Dependency "+dependency+" cannot be found in the apt repository!")

      
print("")
print("List of dependencies:")

# form the directory name for the build version
version_base_dir=project+"/"+epoch+"/"+codename+"-"+arch
dependency_dir=version_base_dir

# create list of dependencies with versions
build_depends=""
for dependency in dependencies:
  dependency_dir = dependency_dir+"/"+dependency+"-"+dependency_versions[dependency]
  build_depends += dependency+" (= "+dependency_versions[dependency]+"), "
  print("  "+dependency+" (= "+dependency_versions[dependency]+")")
build_depends = build_depends[:-2]

dev_depends=""
for dependency in dependencies_dev:
  dev_depends += dependency+" (= "+dependency_versions[dependency]+"), "
dev_depends = dev_depends[:-2]

#print("Dependency ID string: "+dependency_dir)
  
# determine build number
print("")
if not os.path.isfile("DebianBuildVersions/"+dependency_dir+"/BUILD_NUMBER"):
  # the package has not yet been built with these dependencies
  if not os.path.isfile("DebianBuildVersions/"+version_base_dir+"/LAST_BUILD"):
    print("the package was not yet build in this version for this distribution")
    build_number = 1
    # create the dependency directory with the BUILD_NUMBER file in it
    os.makedirs("DebianBuildVersions/"+dependency_dir)
    f = open("DebianBuildVersions/"+dependency_dir+"/BUILD_NUMBER", 'w')
    f.write(str(build_number))
    f.close()
    # create the link file to the last build
    f = open("DebianBuildVersions/"+version_base_dir+"/LAST_BUILD", 'w')
    f.write(dependency_dir)
    f.close()
  else:
    print("package was already built in this version for this distribution with different dependencies")
    # determine the last build's dependency directory
    f = open("DebianBuildVersions/"+version_base_dir+"/LAST_BUILD", 'r')
    last_build = f.readline().rstrip('\n')
    f.close()
    # determine the build number of the last build, increment by one
    f = open("DebianBuildVersions/"+last_build+"/BUILD_NUMBER", 'r')
    build_number = int(f.readline()) + 1
    f.close()
    # create the dependency directory with the BUILD_NUMBER file in it
    os.makedirs("DebianBuildVersions/"+dependency_dir)
    f = open("DebianBuildVersions/"+dependency_dir+"/BUILD_NUMBER", 'w')
    f.write(str(build_number))
    f.close()
    # create the link file to the last build
    f = open("DebianBuildVersions/"+version_base_dir+"/LAST_BUILD", 'w')
    f.write(dependency_dir)
    f.close()
else:    
  print("package was already built in this version for this distribution with the same dependencies")
  # just read the build number from the dependency directory
  f = open("DebianBuildVersions/"+dependency_dir+"/BUILD_NUMBER", 'r')
  build_number = int(f.readline())
  f.close()

print("Build number: "+str(build_number))
  
# extend the config by dynamic variables
config["project"] = project
config["package-basename"] = "lib"+project.lower()
config["build-depends"] = build_depends
config["dev-depends"] = dev_depends
config["distribution"] = codename
config["architecture"] = arch
config["buildversion"] = codename+str(build_number)
config["soversion"] = epoch+config["buildversion"]
config["debversion"] = epoch.replace(".","-")+"-"+config["buildversion"]
config["package-version"] = config["soversion"]+"-"+patchlevel
config["package-source-name"] = config["package-basename"]+"_"+epoch+"-"+config["buildversion"]
config["version"] = version
config["package-message"] = "Debian package for the "+project+" library version "+version
#print(config)

# create directory holding the debian control files
controldir="DebianBuildVersions/"+version_base_dir+"/"+str(build_number)
if not os.path.isdir(controldir):
  os.makedirs(controldir)
if not os.path.isdir(controldir+"/source"):
  os.makedirs(controldir+"/source")

# list of files to be processed (static part)
filelist = [ "makeDebianPackage.config", "compat", "rules", "source/format", "control.src" ]

# list of files to be processed for each package
hasPackages = config["Has-packages"].split(" ")
for package in hasPackages:
  filelist.append("control."+package.strip())
  filelist.append("package-"+package.strip()+".install")

# copyright file
filelist.append("copyright."+config["License"])

# if we have a lib package, add the shlib file
if "lib" in hasPackages:
  filelist.append("package-lib.shlib")
  
#print filelist

# replace config variables in files
for filna in filelist:
  # read file into string
  content = open("templates/"+filna).read()
  # replace all variables
  for var in config.keys():
    content = content.replace("#"+var+"#", config[var])
  # check for unknown variables which have not been replaced
  if content.find("#") != -1:
    pos1 = content.find("#")
    pos2 = content.find("#",pos1+1)
    # two consecutive # are not a variable but will be replaced with a single #, so ignore it
    if pos2 > pos1+1:
      print "File "+filna+" has an unknown variable: "+content[pos1:pos2+1]
      sys.exit(1)
  # replace ## with #, so we can still write single # if needed
  content = content.replace("##", "#")
  # write out the resulting file
  f = open(controldir+"/"+filna,"w")
  f.write(content)
  f.close()

# create the merged control file and remove the parts
subprocess.call(["cat "+controldir+"/control.* > "+controldir+"/control"], shell=True)
subprocess.call(["rm "+controldir+"/control.*"], shell=True)

# rename files which need a different name
os.rename(controldir+"/copyright."+config["License"], controldir+"/copyright")
if "lib" in hasPackages:
  os.rename(controldir+"/package-lib.install", controldir+"/"+config["package-basename"]+config["debversion"]+".install")
  os.rename(controldir+"/package-lib.shlib",   controldir+"/"+config["package-basename"]+config["debversion"]+".shlib")
if "dev" in hasPackages:
  os.rename(controldir+"/package-dev.install", controldir+"/"+config["package-basename"]+"-dev.install")

# make rules file executable
subprocess.call(["chmod", "+x", controldir+"/rules"])

# commit the changes to git
#os.chdir("DebianBuildVersions")
#subprocess.call(["git", "add", "-a" , "."])
#subprocess.call(["git", "commit", "-a" , "-m", "build "+str(build_number)+" of "+version_base_dir])
#subprocess.call(["git", "push"])
#os.chdir("..")

# output the command to build the package
print("")
print("To build the package, run the following command:")
print("./makeDebianPackage "+controldir)
