#!/usr/bin/python

# Note: The script output will be parsed by the master script. Change with care!

import debian.debian_support
import urllib
import subprocess
import os
import sys
import time
import tempfile
import shutil

def findReverseDependencies(DependencyToSearchFor, Packages, ReverseDependencies):
  for Package in Packages:
    PackageAsDictionary = dict(Package)
    if 'Depends' in PackageAsDictionary:
      depends = PackageAsDictionary['Depends']
      depends_array = depends.split(", ")
      for dependency in depends_array:
        dependency_split = dependency.split(" ")
        if(dependency_split[0] == DependencyToSearchFor and len(dependency_split) > 1):
          # extract source version from package version (note that this is a guess, but it holds for packages built with the DebianPackagingScripts)
          version = ""
          for version_part in PackageAsDictionary['Version'].split("."):
            version += version_part.split(codename)[0] + "."
          version = version[:-2]   # remove the trailing dot and dash
          # add the found package to the list
          ReverseDependencies.append(PackageAsDictionary['Package']+' '+version)
          # recursive search: find packages depending on the found package as well
          findReverseDependencies(PackageAsDictionary['Package'], Packages, ReverseDependencies)


# output usage
if len(sys.argv) != 3 and len(sys.argv) != 4 :
  print("Usage: ./findReverseDependencies <package_name> <distribution_codename> [<architecture>]")
  print("Example: ./findReverseDependencies libmtca4u-deviceaccess-dev xenial")
  print("  This will output all packages depending on a specific version of libmtca4u-deviceaccess-dev. It will recursively repeat the search for all found packages.")
  sys.exit()

# parse command line arguments
package = sys.argv[1]
codename = sys.argv[2]
if len(sys.argv) == 4 :
  arch = sys.argv[3]
else:
  arch = "amd64"

# download Packages file from the DESY DOOCS apt repositories
subprocess.call(["wget", "-q", "http://doocspkgs.desy.de/pub/doocs/dists/"+codename+"/main/binary-"+arch+"/Packages", "-O", "Packages.DESY"])

# open Packages file and parse it
PackageFile = debian.debian_support.PackageFile("Packages.DESY")
Packages = []
for Package in PackageFile:
  Packages.append(Package)

# search for packages depending on the specified package
ReverseDependencies = []
findReverseDependencies(package, Packages, ReverseDependencies)

# output list (as a set, to make it unique)
for dep in set(ReverseDependencies):
  print(dep)
